// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String    @id @default(cuid())
  counter         Int       @default(autoincrement())
  email           String    @unique
  password        String
  type            Type      @default(MODEL)
  isDeleted       Boolean   @default(false)
  isAuthenticated Boolean   @default(false)
  emailVerified   DateTime?
  createdAt       DateTime  @default(now()) @map(name: "created_at")
  updatedAt       DateTime  @updatedAt @map(name: "updated_at")
  model           Model?
  client          Client?
  Media           Media[]
  accounts        Account[]
  sessions        Session[]

  @@map(name: "users")
}

enum Type {
  MODEL
  CLIENT
}

model Account {
  id                 String  @id @default(cuid())
  userId             String  @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String?
  access_token       String?
  expires_at         DateTime?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  id         Int      @id @default(autoincrement())
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Model {
  id              Int               @unique @default(autoincrement())
  userId          String            @unique
  user            User              @relation(fields: [userId], references: [id])
  email           String
  firstname       String?
  lastname        String?
  age             Int?
  height          String?
  DOB             String?
  social          Json
  state           String?
  country         String?
  address         String
  isAvailable     Boolean           @default(true)
  bio             String
  contractedModel ContractedModel[]
  modelHistory    ModelHistory[]
}

model Client {
  id              Int               @unique @default(autoincrement())
  user            User              @relation(fields: [userId], references: [id])
  userId          String            @unique
  companyName     String
  email           String
  phone           Json
  social          Json
  state           String?
  country         String?
  address         String
  contractedModel ContractedModel[]
  clientJobs      ClientJobs[]
}

model ContractedModel {
  id       Int    @unique @default(autoincrement())
  client   Client @relation(fields: [clientId], references: [id])
  clientId Int
  model    Model  @relation(fields: [modelId], references: [id])
  modelId  Int
  status   Status @default(ONGOING)
}

enum Status {
  ONGOING
  DONE
}

model ModelHistory {
  id          Int    @unique @default(autoincrement())
  model       Model  @relation(fields: [modelId], references: [id])
  modelId     Int
  job         String
  description String
}

model ClientJobs {
  id             Int     @unique @default(autoincrement())
  client         Client  @relation(fields: [clientId], references: [id])
  clientId       Int
  jobRole        String
  jobDescription String
  salary         String?
  jobType        String?
  jobLength      String?
  isOpen         Boolean @default(true)
}

model Media {
  id          Int         @unique @default(autoincrement())
  userId      String      @unique
  user        User        @relation(fields: [userId], references: [id])
  content     Json[]
  ContentType ContentType
}

enum ContentType {
  DEFAULT
  PROFILE
  GALLERY
  MISC
}
