// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "fullTextIndex"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String    @id @default(cuid())
  counter           Int       @default(autoincrement())
  email             String    @unique
  password          String
  type              Type      @default(Model)
  isDeleted         Boolean   @default(false)
  isAuthenticated   Boolean   @default(false)
  createdAt         DateTime  @default(now()) @map(name: "created_at")
  updatedAt         DateTime  @updatedAt @map(name: "updated_at")
  model             Model?
  client            Client?
  Media             Media[]
  accounts          Account[]
  sessions          Session[]

  @@map(name: "users")
}

enum Type {
  Model
  Client
  Admin
  SuperAdmin
}

model Account {
  id                 String     @id @default(cuid())
  userId             String     @map("user_id")
  type               String
  provider           String?
  providerAccountId  String?    @map("provider_account_id")
  refresh_token      String?    @db.Text
  access_token       String?    @db.Text
  expires_at         DateTime?
  token_type         String?
  scope              String?
  id_token           String?     @db.Text
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  id         Int      @id @default(autoincrement())
  email      String
  password   String
  type       Type     @default(Model)
  token      String   @unique
  expires    DateTime
}

model Model {
  id              Int               @id @default(autoincrement())
  userId          String            @unique
  user            User              @relation(fields: [userId], references: [id])
  firstname       String
  lastname        String
  height          Int?
  bust            Int?
  waist           Int?
  hip             Int?
  shoeSize        Int?
  weight          Decimal?          @db.Decimal(4,1)
  complexion      String?
  dob             DateTime?
  social          Json?
  state           String?
  country         String?
  address         String?
  isAvailable     Boolean?           @default(true)
  bio             String?
  phone           Json?
  types           Types?
  unavailableDays String?
  contracts       Contract[]
  history         History[]
}

enum Types {
  All
  FashionEditorial
  FashionCatalog
  Commercial
  Mature
  Runway
  Swimsuit
  Lingerie
  Fitness
  Fit
  Parts
  Promotional
  Glamour
  Child
  Petite
  PlusSize
  Freelance
  Print
  Other
}

model Client {
  id              Int               @id @default(autoincrement())
  user            User              @relation(fields: [userId], references: [id])
  userId          String            @unique
  companyName     String
  phone           Json
  social          Json
  state           String?
  country         String?
  address         String
  isVetted        Boolean?           @default(false)
  contracts       Contract[]
  jobs            Job[]
}

model       Contract {
  id            Int         @id @default(autoincrement())
  client        Client      @relation(fields: [clientId], references: [id])
  clientId      Int
  model         Model       @relation(fields: [modelId], references: [id])
  modelId       Int
  status        Status      @default(Ongoing)
  locations     Json
  startDate     DateTime?
  startTime     DateTime?
  hours         Int?
  days          Int?
  fee           Decimal?    @db.Decimal(9,2)
}

enum Status {
  Ongoing
  Done
}

model History {
  id          Int    @id @default(autoincrement())
  model       Model  @relation(fields: [modelId], references: [id])
  modelId     Int
  job         String
  description String
}

model Job {
  id             Int     @id @default(autoincrement())
  client         Client  @relation(fields: [clientId], references: [id])
  clientId       Int
  jobRole        String
  jobDescription String @db.Text
  locations      Json
  salary         String?
  jobType        String?
  jobLength      String?
  isOpen         Boolean @default(true)
}

model Media {
  id          Int         @id @default(autoincrement())
  userId      String      @unique
  user        User        @relation(fields: [userId], references: [id])
  content     Json
  contentType ContentType
}

enum ContentType {
  Thumbnail
  ProfileImages
  Gallery
  Misc
}
